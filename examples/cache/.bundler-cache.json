{"src/main.js":{"deps":["./other","log2console"],"type":"UNKNOWN","name":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","referrer":{},"directory":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","fileName":"main.js","filename":"main.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","state":"dependency","source":"import Other from './other';\nimport log2console from 'log2console';\n\nclass Main {\n  constructor() {\n    this._other = new Other();\n  }\n\n  render() {\n    log2console(`render:main`);\n    this._other.render();\n  }\n}\n\n(new Main()).render();\n","hash":"9292fef0c77bd0dbc84876bb767820eb1ecbc2b9"},"src/other.js":{"deps":["./renderer/render-it","./main","log2console"],"type":"UNKNOWN","name":"./other","referrer":{"name":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","filename":"main.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js"},"directory":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/other.js","fileName":"other.js","filename":"other.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/other.js","state":"dependency","source":"import RenderIt from './renderer/render-it';\nimport mainRecursive from './main';\nimport log2console from 'log2console';\n\nclass Other extends RenderIt {\n  constructor() {\n    super();\n  }\n\n  render() {\n    super.render();\n    log2console(`render:other`);\n    log2console('test recursive', mainRecursive);\n  }\n}\n\nexport default Other;\n","hash":"8bac545c73a5d5b511df12ca9fdbb320d8977886"},"node_modules/log2console/src/index.js":{"deps":["dis-isa"],"type":"UNKNOWN","name":"log2console","referrer":{"name":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js","filename":"main.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/main.js"},"directory":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/src/","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/src/index.js","fileName":"index.js","filename":"index.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/src/index.js","state":"dependency","source":"var type = require('dis-isa');\n\nvar _transform = (function getTransform() {\n  if (typeof(process) === 'undefined') {\n    return function(data) {\n      if (type.isPlainObject(data)) {\n        return JSON.stringify(data);\n      }\n      return data;\n    };\n  }\n  else {\n    return function(data) {\n      return data;\n    };\n  }\n})();\n\nvar _console = (function getConsole() {\n  if (typeof(console) === 'undefined') {\n    return {\n      log: function() {},\n      error: function() {}\n    };\n  }\n  else {\n    return console;\n  }\n})();\n\nfunction _setHandled(data) {\n  try {data.handled = true;} catch(ex) {}\n}\n\n/**\n * Logs error to the console and makes sure it is only logged once.\n */\nfunction log(data) {\n  if (type.isError(data)) {\n    if (!data.handled) {\n      _setHandled(data);\n      _console.error(data);\n    }\n  }\n  else {\n    _console.log(_transform(data));\n  }\n  return data;\n}\n\n\nmodule.exports = log;\n","hash":"c4e22a51fadcaab9901202107864d4505a545354"},"src/renderer/render-it.js":{"deps":["log2console"],"type":"UNKNOWN","name":"./renderer/render-it","referrer":{"name":"./other","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/other.js","filename":"other.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/other.js"},"directory":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/renderer/","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/renderer/render-it.js","fileName":"render-it.js","filename":"render-it.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/src/renderer/render-it.js","state":"dependency","source":"import log2console from 'log2console';\n\nclass RenderIt {\n  constructor() {\n  }\n\n  render() {\n    log2console('base render-it!');\n  }\n}\n\nexport default RenderIt;\n","hash":"fcf70ae289eba86902ecd8857e603fa4e4aba3ec"},"node_modules/log2console/node_modules/dis-isa/src/index.js":{"deps":[],"type":"UNKNOWN","name":"dis-isa","referrer":{"name":"log2console","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/src/index.js","filename":"index.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/src/index.js"},"directory":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/node_modules/dis-isa/src/","path":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/node_modules/dis-isa/src/index.js","fileName":"index.js","filename":"index.js","id":"/Users/mcastillo/Projects/bit-bundler/examples/cache/node_modules/log2console/node_modules/dis-isa/src/index.js","state":"dependency","source":"var toString = Function.prototype.apply.bind(Object.prototype.toString);\n\nvar bufferSignature  = typeof Buffer !== \"undefined\" ? toString(Buffer) : \"[object Uint8Array]\";\nvar booleanSignature = toString(true);\nvar regexSignature   = toString(/test/);\nvar dateSignature    = toString(new Date());\nvar arraySignature   = toString([]);\nvar objectSignature  = toString({});\nvar errorSignature   = toString(new Error());\nvar numberSignature  = toString(1);\n\n\n/**\n * Checks if the input is a boolean\n */\nfunction isBoolean(item) {\n  return toString(item) === booleanSignature;\n}\n\n/**\n * Checks is the input is a number\n */\nfunction isNumber(item) {\n  return toString(item) === numberSignature;\n}\n\n/**\n * Checks if the input is a Buffer\n */\nfunction isBuffer(item) {\n  return toString(item) === bufferSignature;\n}\n\n/**\n * Check if input is undefined\n *\n * @param {*} item - Item to be tested for undefined\n * @returns {boolean}\n */\nfunction isUndefined(item) {\n  return item === (void 0);\n}\n\n/**\n * Check if input is null\n *\n * @param {*} item - Item to be tested for null\n * @returns {boolean}\n */\nfunction isNull(item) {\n  return item === null;\n}\n\n/**\n * Check if input is a regulat expression\n *\n * @param {*} item - Item to check for regular expression\n * @returns {boolean}\n */\nfunction isRegex(item) {\n  return !!item && toString(item) === regexSignature;\n}\n\n/**\n * Check if input is an array\n *\n * @param {*} item - Item to be tested for Array\n * @returns {boolean}\n */\nvar isArray = (function() {\n  if (Array.isArray) {\n    return Array.isArray;\n  }\n\n  return function(item) {\n    return toString(item) === arraySignature;\n  };\n})();\n\n/**\n * Check if input is a function\n *\n * @param {*} item - Item to be tested for function\n * @returns {boolean}\n */\nfunction isFunction(item) {\n  return typeof item === \"function\";\n}\n\n/**\n * Check if input is a string\n *\n * @param {*} item - Item to check for string\n * @returns {boolean}\n */\nfunction isString(item) {\n  return typeof item === \"string\";\n}\n\n/**\n * Check if input is an object. Objects are:\n *  - literal object, object instances, arrays, null\n *\n * @param {*} item - Item to check for object\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return typeof item === \"object\";\n}\n\n/**\n * Check if input is a Date\n *\n * @param {*} item - Item to be tested for Date\n * @returns {boolean}\n */\nfunction isDate(item) {\n  return toString(item) === dateSignature;\n}\n\n/**\n * Check if item is an object literal - plain object.\n *\n * @param {*} item - Item to check for object literal\n * @returns {boolean}\n */\nfunction isPlainObject(item) {\n  return toString(item) === objectSignature;\n}\n\n/**\n * Check if input is an error\n *\n * @param {*} item - Item to check for error\n * @returns {boolean}\n */\nfunction isError(item) {\n  return toString(item) === errorSignature || item instanceof Error;\n}\n\n/**\n * Extract the type name. This uses Object.prototype.toString\n * to get the type name.\n *\n * @param {*} item - Item to get the type for\n * @returns {string} type of the object\n */\nfunction typeName(item) {\n  if (isNull(item)) {\n    return \"null\";\n  }\n  else if (isUndefined(item)) {\n    return \"undefined\";\n  }\n\n  return /\\[.+ ([^\\]]+)/.exec(toString(item))[1].toLowerCase();\n}\n\nmodule.exports = {\n  isBoolean: isBoolean,\n  isNull: isNull,\n  isUndefined: isUndefined,\n  isRegex: isRegex,\n  isArray: isArray,\n  isBuffer: isBuffer,\n  isError: isError,\n  isString: isString,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isFunction: isFunction,\n  isDate: isDate,\n  isNumber: isNumber,\n  typeName: typeName,\n  toString: toString\n};\n","hash":"3a2e22e731d66d8ed1b6b0cbd6b8172ecd60f617"}}